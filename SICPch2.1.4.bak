#lang racket
;;; SICP ch2.1.4 Interval Arithmetic, an example of Data Abstraction

;; ch2.1.4 P.85-86
(define (intadd x y)
  (make-interval (+ (lower-bound x) (lower-bound y))
                 (+ (upper-bound x) (upper-bound y)) ) )
(define (intmul-basic x y)
  (let ((p1 (* (lower-bound x) (lower-bound y)))
        (p2 (* (lower-bound x) (upper-bound y)))
        (p3 (* (upper-bound x) (lower-bound y)))
        (p4 (* (upper-bound x) (upper-bound y))) )
    (make-interval (min p1 p2 p3 p4)
                   (max p1 p2 p3 p4) ) ) )
;; ex2.9 P.86
;; 00 [+a, +b] * [+c, +d] = [ ac,  bd] ;; a < b, c < d ;; ac < ? < bd
;; 01 [+a, +b] * [-c, +d] = [-bc,  bd] ;; a < b, c ? d ;; -bc < -ac, ad < bd
;; 02 [+a, +b] * [-c, -d] = [-bc, -ad] ;; a < b, c > d ;; -bc < ? < -ad
;; 10 [-a, +b] * [+c, +d] = [-ad,  bd]
;; 11 [-a, +b] * [-c, +d] = [min(-ad,-bc), max(ac,bd)]  ;; a ? b, c ? d ;; -ad ? -bc, ac ? bd
;; 12 [-a, +b] * [-c, -d] = [-bc,  ac] ;; a ? b, c > d ;; -bc < -bd, ad < ac
;; 20 [-a, -b] * [+c, +d] = [-ad, -bc]
;; 21 [-a, -b] * [-c, +d] = [-ad,  ac]
;; 22 [-a, -b] * [-c, -d] = [ bd,  ac] ;; a > b, c > d ;; bd < ? < ac
(define (intmul x y) ;; ans
  (define neg (- 1))
  (define (inttype x)
    (cond ((and (> (lower-bound x) 0) (> (upper-bound x) 0)) 0)
          ((and (< (lower-bound x) 0) (> (upper-bound x) 0)) 1)
          ((and (< (lower-bound x) 0) (< (upper-bound x) 0)) 2) ) )
  (let ((a (lower-bound x)) (b (upper-bound x))
        (c (lower-bound y)) (d (upper-bound y)) )
       (cond ((and (= (inttype x) 0) (= (inttype y) 0))
              (make-interval (* a c) (* b d)))
             ((and (= (inttype x) 0) (= (inttype y) 1))
              (make-interval (* neg b c) (* b d)))
             ((and (= (inttype x) 0) (= (inttype y) 2))
              (make-interval (* neg b c) (* neg a d)))
             ((and (= (inttype x) 1) (= (inttype y) 0))
              (make-interval (* neg a d) (* b d)))
             ((and (= (inttype x) 1) (= (inttype y) 1))
              (make-interval (min (* neg a d) (* neg b c))
                             (max (* a c) (* b d)) ) ) ;; !!
             ((and (= (inttype x) 1) (= (inttype y) 2))
              (make-interval (* neg b c) (* a c)))
             ((and (= (inttype x) 2) (= (inttype y) 0))
              (make-interval (* neg a d) (* neg b c)))
             ((and (= (inttype x) 2) (= (inttype y) 1))
              (make-interval (* neg a d) (* a c)))
             ((and (= (inttype x) 2) (= (inttype y) 2))
              (make-interval (* b d) (* a c))) ) ) )
(define (intdiv x y)
  (if (or (and (< (lower-bound y) 0) (< (upper-bound y) 0))
          (and (> (lower-bound y) 0) (> (upper-bound y) 0)) )
      (intmul x
              (make-interval (/ 1 (upper-bound y))
                             (/ 1 (lower-bound y)) ) )
      (error "ZeroDivisionError: (intdiv) division by an interval containing zero:"
             y) ) ) ;; ex2.9 P.86 ;; ans

;; ex2.6 P.86
(define (make-interval a b) (cons a b))
(define (upper-bound n) (cdr n)) ;; ans
(define (lower-bound n) (car n)) ;; ans

;; ex2.7 P.86
(define (intsub x y) ;; ans
  (intadd x (make-interval (- (upper-bound y)) (- (lower-bound y))) ) )

;; ex2.8 P.86
;; interval: [a, b] + [c, d] = [a+c, b+d]
;; width:     b-a   +  d-c   = (b+d)-(a+c)
;; interval: [a, b] - [c, d] = [a-d, b-c]
;; width:     b-a   +  d-c   = (b-c)-(a-d) = (b+(-c))-(a+(-d))
;; interval: [a, b] * [c, d] = [min, max]
;; width:     b-a      d-c   =  max-min (irrelevant to width)
;; interval: [a, b] / [c, d] = [a, b] * [1/d, 1/c] = [min, max]
;; width:     b-a      d-c   =                     =  max-min
(define (int-print n)
  (display "[")
  (display (lower-bound n))
  (display ", ")
  (display (upper-bound n))
  (display "]") )
;; this shows the width of multiplication/division of
;; intervals of different width can be the same
(int-print (intmul (make-interval -1 1) (make-interval 0 1)))
(int-print (intmul (make-interval -1 1) (make-interval -1 1)))
(newline)
(int-print (intdiv (make-interval -1 1) (make-interval -1 1)))
(int-print (intdiv (make-interval -1 1) (make-interval -2 1)))
